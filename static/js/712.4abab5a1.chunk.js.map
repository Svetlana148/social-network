{"version":3,"file":"static/js/712.4abab5a1.chunk.js","mappings":"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","sources":["webpack://react_4_lesson/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__oYXe4\",\"loginPasswordtError\":\"Login_loginPasswordtError__FMG+y\",\"loginFormError\":\"Login_loginFormError__ycOq4\",\"loginFormTextError\":\"Login_loginFormTextError__fN+do\",\"loginInput\":\"Login_loginInput__sCJno\",\"loginFormInput\":\"Login_loginFormInput__g-usL\",\"loginCheckbox\":\"Login_loginCheckbox__mD3qO\",\"loginButton\":\"Login_loginButton__hCTnV\",\"loginButtonInaccessible\":\"Login_loginButtonInaccessible__aclX+\",\"captchaSymbols\":\"Login_captchaSymbols__V1viO\",\"captcha\":\"Login_captcha__JhtAb\",\"captchaInput\":\"Login_captchaInput__SW0Lm\"};","/** Displays data for LoginPage */\r\nimport React from 'react'\r\nimport s from \"./Login.module.css\";\r\nimport { SubmitErrorHandler, SubmitHandler, useForm } from 'react-hook-form';\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, AppStateType } from '../../redux/redux-store';\r\n\r\n\r\n// Structure : (2 LoginPage (1 LoginForm))\r\n// 2 LoginPage provides (1 LoginForm)) with: \t\"captchaUrl\"\r\n\r\n\r\n// 1. LoginForm ----------------------------------------------------------------------------------\r\n/**\r\n * 1. LoginForm collects user data for Login\r\n */\r\nfunction LoginForm (props: LoginFormPropsType) {\r\n\r\n\t/** \"useForm\" - Generik  What you can do with a form and Default form field values\r\n\t *{register - registration, handleSubmit - data collection in the form, formState- form state (errors here)}-Form handling capabilities\r\n\t */\r\n\tconst { register, handleSubmit, formState: {errors}  } = useForm<ILoginForm>({\r\n      defaultValues: {              //to pass additional parameters\r\n\t\t\tcaptcha : \"\",\r\n\t\t\temail : \"\",\r\n\t\t\tpassword : \"\",\r\n      }\r\n   })\r\n//  Submit----------------------------------------------------------------\r\n\t/** Successful Submit */\r\n\tconst submit : SubmitHandler<ILoginForm > = (formData) =>{\r\n\t\tprops.loginSubmit(formData);\r\n\t}\r\n\r\n\t/** Unsuccessful Submit */\r\n\tconst error : SubmitErrorHandler<ILoginForm > = data =>{\r\n\t}\r\n//----------------------------------------------------------------\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t{/* a worker of the form; at the entrance successful and unsuccessful Submit*/}\r\n\t\t{props.captchaUrl && \r\n\t\t\t<div className={s.loginPasswordtError}>Email or password is wrong</div>\r\n\t\t}\r\n\t\t\t<form onSubmit={handleSubmit(submit, error)}>   \r\n\t\t\t\t<div className={s.loginInput}>\r\n\t\t\t\t\t<input type='text' {...register('email', {required: \"Email Address is required\", \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpattern: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: 'Incorrect Email' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}})} \r\n\t\t\t\t\t\tclassName={errors.email? s.loginFormError : s.loginFormInput} aria-invalid={errors.email? true :false} placeholder=\"email\"/>\r\n\t\t\t\t\t\t{ errors.email && \r\n\t\t\t\t\t\t\t<span className={s.loginFormTextError}>{ errors.email?.message }</span>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className={s.loginInput}>\r\n\t\t\t\t\t<input type='password' {...register('password', {required: \"Password is required\", \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmaxLength:  {value: 20, message: 'Password exceeds 20 symbols'},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tminLength:  {value: 4, message: 'Password shorter 4 symbols'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={errors.email? s.loginFormError : s.loginFormInput} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Password\"/>\r\n\t\t\t\t\t{ errors.password && \r\n\t\t\t\t\t\t\t<span className={s.loginFormTextError}>{ errors.password?.message }</span>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\r\n\t\t\t\t<div >\r\n\t\t\t\t\t<input type='checkbox' {...register('rememberMe')} className={s.loginCheckbox}/>\r\n\t\t\t\t\tremember me\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Captcha---------------------------------------------  */}\r\n\t\t\t\t{props.captchaUrl &&\r\n\t\t\t\t\t<div className={s.captcha}>\r\n\t\t\t\t\t\t\t<div>Captcha:</div>\r\n\t\t\t\t\t\t\t<div className={s.captchaSymbols}>{props.captchaUrl && <img src = {props.captchaUrl} alt=\"captcha\"/>}</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className={s.captchaInput}>\r\n\t\t\t\t\t\t\t{props.captchaUrl && <input type='input' {...register('captcha', {required: \"Captcha is required\"} )} \r\n\t\t\t\t\t\t\tplaceholder=\"Symbol from image\" className={s.loginFormInput}/>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{/* --------------------------------------------- */}\r\n\r\n\t\t\t\t\r\n\t\t\t\t<div className={s.loginButton}>\r\n\t\t\t\t<button className={errors.email || errors.password ? s.loginButtonInaccessible :\"\"}>Login</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form> \r\n\t\t</>\r\n\t)\r\n}\r\n\r\n/** What data does the form collect (what the user enters) */\r\ninterface ILoginForm {\r\n\tcaptcha : string\r\n\temail : string\r\n\tpassword : string\r\n\trememberMe : boolean | null\r\n}\r\n\r\n/** What  the component \"LoginForm\" receives */\r\ntype LoginFormPropsType = {\r\n\tcaptchaUrl : string | null,\r\n\tloginSubmit: (formData: ILoginForm) =>void\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------------------\r\n/**\r\n * 2. LoginPage (LoginForm))\r\n * LoginPage provides LoginForm with: \t\"captchaUrl\"\r\n */\r\nexport const LoginPage : React.FC = () => {\r\n\t\r\n\t// \"useSelector( our selector)\" to obtain data from \"state\" \r\n\tconst captchaUrl = useSelector((state: AppStateType)=>state.auth.captchaUrl)\r\n\tconst isAuth = useSelector((state: AppStateType)=>state.auth.isAuth)\r\n\r\n\t//const dispatch = useDispatch()  to obtain \"dispatch\"\r\n\tconst dispatch: AppDispatch  =  useDispatch()\r\n\tconst loginSubmit = (formData: ILoginForm) =>{\r\n\t\tdispatch(login(formData.email, formData.password, formData.rememberMe ?? false, formData.captcha));\r\n\t}\r\n\r\n\r\n\tif (isAuth) {\r\n\t\t//\"Navigate\" instead of \"Redirect\"\r\n\t\treturn <Navigate to={(\"/Profile\")} />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<h1>Login </h1>\r\n\t\t\t<div>Use demo account to login:</div>\r\n\t\t\t<div>Email: free@samuraijs.com</div>\r\n\t\t\t<div style={{margin: \"0 0 20px 0\" }}>Password: free</div>\r\n\t\t\t<LoginForm captchaUrl={captchaUrl}  loginSubmit = {loginSubmit}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LoginPage\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["LoginForm","props","_errors$email","_errors$password","register","handleSubmit","formState","errors","useForm","defaultValues","captcha","email","password","_jsxs","_Fragment","children","captchaUrl","_jsx","className","s","onSubmit","formData","loginSubmit","data","type","required","pattern","value","message","placeholder","maxLength","minLength","src","alt","LoginPage","useSelector","state","auth","isAuth","dispatch","useDispatch","Navigate","to","style","margin","_formData$rememberMe","login","rememberMe"],"sourceRoot":""}