{"version":3,"file":"static/js/759.bcadda73.chunk.js","mappings":"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","sources":["webpack://react_4_lesson/./src/components/Profile/Profile.module.css?b512","webpack://react_4_lesson/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react_4_lesson/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://react_4_lesson/./src/components/Profile/MyPosts/AddPostForm/AddPostForm.module.css?7b47","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react_4_lesson/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"Profile_myPosts__QCbxj\"};","// extracted by mini-css-extract-plugin\nexport default {\"addMyPosts\":\"MyPosts_addMyPosts__vKVy6\",\"posts\":\"MyPosts_posts__2O2lx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__AjO3u\",\"profilePhoto\":\"Post_profilePhoto__My6TX\",\"profilePhotoName\":\"Post_profilePhotoName__psk76\",\"postMessage\":\"Post_postMessage__L1oHF\",\"postLike\":\"Post_postLike__3ZSwf\"};","/** Displaying 1 post*/\r\nimport React from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport { PhotosType } from '../../../../types/types';\r\nimport { HeartOutlined} from '@ant-design/icons';\r\n\r\n\r\ntype PropsType = {\r\n\tmessage: string\r\n\tlikesCount: number\r\n\tprofilePhoto: PhotosType | undefined\r\n\tfullName: string | undefined\r\n}\r\n\r\n/** Displaying 1 post*/\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.item}>\r\n\t\t\t<div className={s.profilePhoto}>\r\n\t\t\t\t<img src={props.profilePhoto?.small??\"\"} alt=\"\" />\r\n\t\t\t\t<div className={s.profilePhotoName}>{props.fullName}</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\r\n\t\t\t<div className={s.postMessage}>\r\n\t\t\t\t{props.message} \r\n\t\t\t</div>\r\n\t\t\t<div className={s.postLike}>\r\n\t\t\t<HeartOutlined />\r\n\t\t\t\t{props.likesCount}\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t);\r\n\r\n}\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"buttonSave\":\"AddPostForm_buttonSave__8xngD\"};","/** Add a new Post in Profile Page*/\r\nimport React from 'react';\r\nimport { SubmitErrorHandler, SubmitHandler, useForm } from 'react-hook-form';\r\nimport s from './AddPostForm.module.css';\r\n\r\n/** Stucture: (2. profileInfo \"onSubmit (function \"saveProfile\" (\"formData\" from Redux))\" (1. ProfileDataForm \"Form\")))*/\r\n\r\n/** What data does the form collect (what the user enters)*/\r\nexport type AddPostFormType = {\r\n\tnewPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {  \r\n\t\taddPost: (newPostText: string) => void\r\n}\r\n\r\n\r\n/**1. component with Form for adding a new post*/\r\nexport default function AddPostForm (props: MapDispatchPropsType){\r\n\r\n\t// const AddPostForm = ({handleSubmit, profile, error}) =>{\r\n\t// \"useForm\" Generik  What you can do with a form and Default form field values\r\n\t// {register - registration, handleSubmit - data collection in the form, formState- form state (errors here)\r\n\tconst { register, handleSubmit, formState: { errors } } = useForm<AddPostFormType>({\t})\r\n\r\n\r\n//  Submit----------------------------------------------------------------\r\n\t//Successful Submit\r\n\tconst submit : SubmitHandler<AddPostFormType > = (formData) =>{ \r\n\t\tprops.addPost(formData.newPostText);\r\n\t}\r\n\r\n\t//unsuccessful Submit\r\n\tconst error : SubmitErrorHandler<AddPostFormType> = data =>{\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(submit, error)}> \r\n\r\n\t\t\t\t{/* {error && <div className={style.formSummaryError}>\r\n\t\t\t\t\t{error}\r\n\t\t\t\t</div>} */}\r\n\r\n\t\t\t\t{/* Fields of the form */}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>Add post:&nbsp; </b> \r\n\t\t\t\t\t<input type='textarea' {...register('newPostText', \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{maxLength:  {value: 520, message: 'Text of post exceeds 520 symbols'}})} />\r\n\t\t\t\t\t<div className={s.buttonSave}></div>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t<button >Save</button>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}","/** Displays \"My posts\" chapter for profilePage content*/\r\nimport React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostForm from './AddPostForm/AddPostForm';\r\nimport { PhotosType, PostType } from '../../../types/types';\r\n\r\n\r\nexport type MapsPropsType = {  \r\n\tpostsData : Array<PostType>,\r\n\tprofilePhoto: PhotosType | undefined,\r\n\tfullName: string | undefined\r\n}\r\nexport type DispatchPropsType = {  \r\n\taddPost: (newPostText: string) => void\r\n}\r\n\r\n\r\n/** Display \"My posts\" chapter for profilePage content*/\r\nconst MyPosts : React.FC<MapsPropsType & DispatchPropsType> = (props => {\r\n\r\n\tlet postsElement = [...props.postsData]\r\n\t\t\t\t\t\t\t.reverse()\t\t\t\t\t\t\t//New \"Posts\"are the first to publish\r\n\t\t\t\t\t\t\t.map(p => <Post key ={p.id} message={p.message} likesCount={p.likesCount} \r\n\t\t\t\t\t\t\t\t\t\t\t\tprofilePhoto={props.profilePhoto} fullName={props.fullName}/>);\r\n\treturn (\r\n\t\t<div className={s.myPosts}>\r\n\t\t\t<div className={s.addMyPosts}>\t\r\n\t\t\t\t<h3>My posts:</h3>\r\n\t\t\t\t<AddPostForm addPost={props.addPost}/>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div className={s.posts}>\r\n\t\t\t\t{postsElement}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\n/** \"memo\" is a higher-order component (HOC) that wraps a component and re-renders it only when its props have changed*/\r\nconst MyPostsMemo = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemo;","/** Supplies the component \"My posts\" with data and function \"addPost\"*/\r\nimport React from 'react';\r\nimport {actions} from '../../../redux/profile-reducer';\r\nimport MyPosts, { DispatchPropsType, MapsPropsType } from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType)=>{\r\n\treturn {\r\n\t\tpostsData : state.profilePage.postsData,\r\n\t\tprofilePhoto : state.profilePage.profile?.photos,\r\n\t\tfullName : state.profilePage.profile?.fullName,\r\n\t}\r\n};\r\n\r\n\r\n/** Provide the component ProfileContainer with data and functions */\r\n// Types for \"connect\"  :  TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState\r\nconst MyPostsContainer = connect<MapsPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{addPost: actions.addPostActionCreator})(MyPosts)\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"img1\":\"ProfileInfo_img1__LoCBG\",\"mainNameBlock\":\"ProfileInfo_mainNameBlock__-R+lv\",\"mainPhotoBlock1\":\"ProfileInfo_mainPhotoBlock1__TzXhH\",\"mainPhoto\":\"ProfileInfo_mainPhoto__T6bPk\",\"mainPhotoBlock2\":\"ProfileInfo_mainPhotoBlock2__nOFDU\",\"mainPhotoBlock2Name\":\"ProfileInfo_mainPhotoBlock2Name__wlWM+\",\"mainPhotoButton\":\"ProfileInfo_mainPhotoButton__NfdKC\",\"profileInfoForm\":\"ProfileInfo_profileInfoForm__JFPvu\",\"profileStatus\":\"ProfileInfo_profileStatus__0qX0P\",\"editProfileButton\":\"ProfileInfo_editProfileButton__rsk-k\",\"profileSection\":\"ProfileInfo_profileSection__Ss-Nw\",\"contact\":\"ProfileInfo_contact__N-253\"};","/** Form in \"My Profile\" (editing my profile data)*/\r\nimport React from 'react';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport { Button, Checkbox, Form, FormProps, Input } from 'antd';\r\n\r\n\r\n// Structure: 2. profileInfo supply (1. ProfileDataForm) with: \"saveProfile\"-function-callback\r\n\r\n/** What data does the form collect (what the user enters)*/\r\ninterface IProfileDataEditFormType {\r\n\tfullName: string\r\n\tlookingForAJob: boolean | null\r\n\tlookingForAJobDescription: string\r\n\taboutMe: string\r\n\tcontacts: ContactsType\r\n}\r\n\r\n\r\n/** 1. Main component with a Form*/\r\nexport default function ProfileDataForm({ initialValues, saveProfile }: ProfileDataFormPropsType) {\r\n\t// const ProfileDataForm = ({handleSubmit, profile, error}) =>{\r\n\r\n\t/**  \"useForm\" Generik  What you can do with a form and Default form field values\r\n\t * {register - registration, handleSubmit - data collection in the form, formState- form state (errors here)}*/\r\n\r\n\t//Successful Submit\r\n\tconst submitSuccess:  FormProps<IProfileDataEditFormType>['onFinish'] = (formData) => {\r\n\t\tlet updatedProfile: ProfileType = {\r\n\t\t\t...initialValues, fullName: formData.fullName,\r\n\t\t\tlookingForAJob: formData.lookingForAJob ?? false,\r\n\t\t\tlookingForAJobDescription: formData.lookingForAJobDescription,\r\n\t\t\taboutMe: formData.aboutMe,\r\n\t\t\tcontacts: formData.contacts\r\n\t\t}\r\n\t\tsaveProfile(updatedProfile);\r\n\t}\r\n\r\n\t//Unsuccessful Submit\r\n\tconst errorSubmit:FormProps<IProfileDataEditFormType>['onFinishFailed'] = (errorInfo) => {\r\n\t}\r\n\t//----------------------------------------------------------------\r\n\r\n\treturn (\r\n\t\t<Form style={{ maxWidth: 600 }}  labelCol={{ span: 8 }}\twrapperCol={{ span: 16 }} initialValues={initialValues}\r\n\t\t\t\tonFinish={submitSuccess}\r\n\t\t\t\tonFinishFailed={errorSubmit}>\r\n\r\n\t\t\t<Form.Item<IProfileDataEditFormType>\r\n\t\t\tlabel=\"Full name\"\r\n\t\t\tname=\"fullName\"\r\n\t\t\trules={[{ required: true, message: 'Please input your username!' },\r\n\t\t\t\t\t\t{ max: 30, message: 'Full name exceeds 30 symbols' },\r\n\t\t\t\t\t\t{ min: 2, message: 'Full name  shorter 2 symbols' },\r\n\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\r\n\t\t\t<Form.Item<IProfileDataEditFormType>\r\n\t\t\tlabel=\"Looking for a job\"\r\n\t\t\tname=\"lookingForAJob\"\r\n\t\t\tvaluePropName=\"checked\"\r\n\t\t\t>\r\n\t\t\t\t<Checkbox></Checkbox>\r\n\t\t\t</Form.Item>\r\n\r\n\t\t\t<Form.Item<IProfileDataEditFormType>\r\n\t\t\tlabel=\"My professional skills\"\r\n\t\t\tname=\"lookingForAJobDescription\"\r\n\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\t\t\t\r\n\t\t\t<Form.Item<IProfileDataEditFormType>\r\n\t\t\tlabel=\"About me\"\r\n\t\t\tname=\"aboutMe\"\r\n\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\t\r\n\r\n\t\t\t<Form.Item<IProfileDataEditFormType>\r\n\t\t\tlabel=\"Contacts:\"\r\n\t\t\t>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"GitHub\"\tname={['contacts', 'github']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }}  \r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"facebook\" name={['contacts', 'facebook']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }} \r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"instagram\"\r\n\t\t\t\tname={['contacts', 'instagram']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"vk\"\r\n\t\t\t\tname={['contacts', 'vk']}  labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }} initialValue={initialValues.contacts.vk}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"X (twitter)\"\r\n\t\t\t\tname={['contacts', 'twitter']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }} initialValue={initialValues.contacts.website}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"website\"\r\n\t\t\t\tname={['contacts', 'website']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }} initialValue={initialValues.contacts.youtube}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"youtube\"\r\n\t\t\t\tname={['contacts', 'youtube']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\r\n\t\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"main Link\"\r\n\t\t\t\tname={['contacts', 'mainLink']} labelCol={{ span: 5 }}\twrapperCol={{ span: 19 }}\r\n\t\t\t\trules={[{ pattern: new RegExp(/((http|ftp|https):\\/\\/){0,1}([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])/), \r\n\t\t\t\t\tmessage: 'Incorrect URL format!' },\r\n\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form.Item>\r\n\r\n\t\t\t<Form.Item wrapperCol={{ offset: 15, span: 9 }}>\r\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\r\n\t\t\t\t\tSave\r\n\t\t\t\t</Button>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n\tinitialValues: ProfileType\r\n\tsaveProfile: (formData: ProfileType) => void\r\n}","/** Changes \"Status\" on Profile page, using \"local State\" from Redux*/\r\nimport React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport { EditOutlined} from '@ant-design/icons';\r\n\r\n\r\ntype PropsType = {  \r\n\tstatus: string\r\n\tupdateStatus: (status: string)=>void\r\n\tisOwner:boolean\r\n}\r\n\r\n/** Changes \"Status\" on Profile page, using \"local State\" from Redux*/\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\t\r\n\t//В [0] сидит editMode, в [1] ф-ция, меняющая editMode\r\n\tlet [editMode, setEditMode] = useState(false); //Дает LockalState в \"editMode\"  и ф-цию, которая его меняет \"setEditMode\"\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n\tuseEffect (() =>{\r\n\t\tsetStatus(props.status);\r\n\t\t}, [props.status]\r\n\t);\r\n\r\n\tconst activateEditMode = () =>{\r\n\t\tif (props.isOwner) setEditMode(true);\r\n\t}\r\n\r\n\tconst deactivateEditMode = () =>{\r\n\t\tsetEditMode(false);\r\n\r\n\t\t/** send status to server */\r\n\t\tprops.updateStatus(status);\r\n\t\t}\r\n\t\r\n\r\n\t/** Changes \"Status\" on Profile page, using \"local State\" from Redux*/\t\r\n\tconst onStatusChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n\t\t/** \"(e: ChangeEvent<HTMLInputElement>)\" - standard from react*/\r\n\t\tsetStatus(e.currentTarget.value);\r\n\t\t}\r\n\t\r\n\t\treturn (\r\n\t\t\t<div> \r\n\t\t\t\t{!editMode &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<b>Status : </b>\r\n\t\t\t\t\t\t<span onDoubleClick={activateEditMode}>{props.status || \"----------\"} &nbsp; </span>\r\n\t\t\t\t\t\t<EditOutlined onClick={activateEditMode}/>\r\n\r\n\t\t\t\t\t</div>\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{editMode &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input  onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\t\t\t\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t); \r\n}\r\nexport default ProfileStatusWithHooks;","/** Display and edit user profile*/\r\nimport React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../img/UserUnknown.png';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\n\r\n\r\n/** Main component ProfileInfo(ProfileData(Contact))*/\r\nconst ProfileInfo : React.FC<ProfileInfoPropsType>= ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n\t/** Gives \"editMode\" and the function that changes it \"setEditMode\"*/\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\r\n\tconst onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files?.length) {\t\t\t//Если файл есть, то берем его длину\r\n\t\t\tsavePhoto(e.target.files[0]);\r\n\t\t}\r\n\t}\r\n\r\n\t// \"then\" function only to enable \"EditMode\" \r\n\t//only when everything was saved to the server, i.e. there were no errors. (remove then)\r\n\t//to this in \"profile-reducer.js\" you need to add \"Promise.reject (response.data.messages[0])\"; \r\n\tconst onSubmit = (formData: ProfileType) => {\r\n\t\tsaveProfile(formData).then(\r\n\t\t\t() => { setEditMode(false); }\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\r\n\t\t\t<div className={s.img1}>\r\n\t\t\t\t<img src='https://img.freepik.com/free-photo/tropical-beach_74190-188.jpg' alt='' />\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t<div className={s.mainNameBlock}>\r\n\t\t\t\t<div className={s.mainPhotoBlock1}>\r\n\t\t\t\t\t<img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt='' />\r\n\t\t\t\t\t<div className={s.mainPhotoBlock2}>\r\n\t\t\t\t\t\t<div className={s.mainPhotoBlock2Name}>{profile.fullName}</div>\r\n\t\t\t\t\t\t<div className={s.profileStatus}>\r\n\t\t\t\t\t\t\t<ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t{/* If you are the owner of this profile, then show the button to select a photo  */}\r\n\t\t\t\t\t\t<div className={s.mainPhotoButton}>\r\n\t\t\t\t\t\t\t{isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className={s.profileInfoForm}>\r\n\t\t\t\t\t{/* If \"Edit Mode\", then show the form for changing the profile */}\r\n\t\t\t\t\t{editMode ?\r\n\t\t\t\t\t\t<ProfileDataForm initialValues={profile} saveProfile={onSubmit} /> \r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\ntype ProfileInfoPropsType = {  \r\n\tprofile : ProfileType  | null\r\n\tstatus : string\r\n\tupdateStatus : (status : string)=>void\r\n\tisOwner : boolean\r\n\tsavePhoto : (file : File)=>void\r\n\tsaveProfile : (formData:ProfileType)=>Promise<any>\r\n}\r\n\r\n\r\n/** Displays Profile's information*/\r\nconst ProfileData : React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n\treturn <div>\r\n\t\t<div className={s.editProfileButton}>\t\r\n\t\t\t{isOwner && <div><button onClick={goToEditMode}>Edit Profile</button>\r\n\t\t</div>}\r\n\t\t</div>\r\n\t\t<div className={s.profileSection}>\r\n\t\t\t<b>Full name</b> : {profile.fullName}\r\n\t\t</div>\r\n\t\t<div className={s.profileSection}>\r\n\t\t\t<b>Looking for a job</b> : {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n\t\t</div>\r\n\t\t<div className={s.profileSection}>\r\n\t\t\t<b>My professional skills</b> : {profile.lookingForAJobDescription}\r\n\t\t</div>\r\n\t\t<div className={s.profileSection}>\r\n\t\t\t<b>About me</b> : {profile.aboutMe}\r\n\t\t</div>\r\n\t\t\r\n\t\t<div className={s.profileSection}>\r\n\t\t\t<b>Contacts:</b>\r\n\t\t\t<Contact key={1} contactTitle=\"GitHub\" contactValue={profile.contacts.github} />\r\n\t\t\t<Contact key={2} contactTitle=\"Facebook\" contactValue={profile.contacts.facebook} />\r\n\t\t\t<Contact key={3} contactTitle=\"Instagram\" contactValue={profile.contacts.instagram} />\r\n\t\t\t<Contact key={4} contactTitle=\"vk\" contactValue={profile.contacts.vk} />\r\n\t\t\t<Contact key={5} contactTitle=\"X (twitter)\" contactValue={profile.contacts.twitter} />\r\n\t\t\t<Contact key={6} contactTitle=\"website\" contactValue={profile.contacts.website} />\r\n\t\t\t<Contact key={7} contactTitle=\"youtube\" contactValue={profile.contacts.youtube} />\r\n\t\t\t<Contact key={8} contactTitle=\"mainLink\" contactValue={profile.contacts.mainLink} />\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n\tprofile: ProfileType\r\n\tisOwner: boolean\r\n\tgoToEditMode: ()=>void\r\n}\r\n\r\n\r\n/** Displays a part of Profile's information, namely \"Contacts\"*/\r\nconst Contact  : React.FC<ContactPropsType>= ({ contactTitle, contactValue }) => {\r\n\treturn <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n\tcontactTitle: string\r\n\tcontactValue: string\r\n}\r\n\r\nexport default ProfileInfo;","/** Display content for Profile page*/\r\nimport React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { ProfileType } from '../../types/types';\r\n\r\n\r\ntype PropsType = {  //Из  \"ProfileInfo.tsx\"\r\n\tprofile : ProfileType | null\r\n\tstatus : string\r\n\tupdateStatus : (status : string)=>void\r\n\tisOwner : boolean\r\n\tsavePhoto : (file : File)=>void\r\n\tsaveProfile : (formData:ProfileType)=>Promise<any>\r\n}\r\n\r\n/** Display content for Profile page*/\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ProfileInfo \r\n\t\t\tsavePhoto = {props.savePhoto}\r\n\t\t\tisOwner = {props.isOwner} \r\n\t\t\tprofile = {props.profile} \r\n\t\t\tstatus = {props.status}\r\n\t\t\tupdateStatus = {props.updateStatus}\r\n\t\t\tsaveProfile = {props.saveProfile}\r\n\t\t\t/> \r\n\t\t\t<div className={s.myPosts}>\r\n\t\t\t\t<MyPostsContainer/>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Profile;","/** Container for supplying the \"Profile\" component with data */\r\nimport React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer'\r\nimport { compose } from 'redux';\r\nimport { NavigateFunction, useLocation, useNavigate, useParams  } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport { AppStateType } from '../../redux/redux-store.js';\r\nimport { ProfileType } from '../../types/types';\r\n/** */\r\n\r\n/** Structure: (2 compose (1 ProfileContainer))\r\n * 2 compose supply (1 ProfileContainer)) with: \t\r\n * from \"State\" : \t\t\tprofile, status, authorizedUserId, isAuth\r\n * functions-callbacks:\t\"{getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}\"\r\n * navigation:\t\t\t\t\t\"withRouter-ом\"\r\n*/\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps> \r\n\r\ntype DispatchPropsType = {\r\n\tgetUserProfile: (userId: number)=>void\r\n\tgetStatus: (userId: number)=>void\r\n\tupdateStatus: (status: string)=>void\r\n\tsavePhoto: (file : File)=>void\r\n\tsaveProfile: (profile : ProfileType)=>Promise<any>\r\n}\r\n\r\n//Type for WithRouter\r\ntype PathParamsType = {\r\n\tuserId: string,\r\n\tnavigate: NavigateFunction\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & PathParamsType\r\n\r\n/** Container for supplying the \"Profile\" component with data */\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n\trefreshProfile(){\r\n\t\t/**  match from withRouter*/\r\n\t\tlet userId: number | null = +this.props.userId;\r\n\t\t/** if there is no \"userId\"*/\r\n\t\tif (!userId){\r\n\t\t\t/** then \"userId\" from authorization */\r\n\t\t\tuserId=this.props.authorizedUserId;\r\n\t\t\t/** if there is no \"userId\" in the authorization then log in*/\r\n\t\t\tif (!userId){\r\n\t\t\t\tthis.props.navigate(\"/Login\")\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!userId){\r\n\t\t\tconsole.error(\"UserId should exist\")\r\n\t\t} else{\r\n\t\t/** Request to get a profile of some User*/\r\n\t\tthis.props.getUserProfile(userId);\r\n\t\tthis.props.getStatus(userId);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.refreshProfile()\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: PropsType, prevState: PropsType){\r\n\t\t/** if new params came*/\r\n\t\tif (this.props.userId !== prevProps.userId){\r\n\t\t\tthis.refreshProfile()\r\n\t\t}\r\n\t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{/* If there is no userId, then this is our profile and I am the owner */}\r\n\t\t\t\t<Profile {...this.props} \t\t\t\t\r\n\t\t\t\tisOwner = {!this.props.userId} \r\n\t\t\t\tprofile = {this.props.profile} \r\n\t\t\t\tstatus = {this.props.status} \r\n\t\t\t\tupdateStatus = {this.props.updateStatus}\r\n\t\t\t\tsavePhoto = {this.props.savePhoto}\r\n\t\t\t\tsaveProfile ={this.props.saveProfile}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType)=>({\r\n\tprofile : state.profilePage.profile,\r\n\tstatus : state.profilePage.status,\r\n\tauthorizedUserId : state.auth.userId,\r\n\tisAuth : state.auth.isAuth\r\n\t\r\n});\r\n\r\n/** A function that creates an wrapping component*/\r\nfunction withRouter<WCP extends MapPropsType&DispatchPropsType> (WrappedComponent: React.ComponentType<WCP>) { //\"WrappedComponent\" - обораЧИВАЕМАЯ к-та\r\n\t\r\n\t//wrapping component supplies with: \"location\", \"navigate\", \"params\"  + \"userId \", \"navigate\"\r\n\tfunction ComponentWithRouterProp(props: MapPropsType & DispatchPropsType) {\r\n\t\tlet location = useLocation();\r\n\t\tlet navigate = useNavigate();\r\n\t\tlet params = useParams(); //Creates an Object from a \"URL\"\r\n\r\n\r\n\t\tuseEffect(() => {\r\n\t\tif (!props.isAuth) {\r\n\t\t\tnavigate(\"/login\");\r\n\t\t}\r\n\t\t}, [props.isAuth, navigate]);\r\n\r\n\t\t//Extracts \"userId\" from \"URL\"\r\n\t\tlet userId = params.userId;\r\n\r\n\t\treturn (\r\n\t\t\t<WrappedComponent\r\n\t\t\t{...props as WCP}\r\n\t\t\trouter={{ location, navigate, params }} \r\n\t\t\tuserId = {userId}\r\n\t\t\tnavigate = {navigate}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn ComponentWithRouterProp;\r\n\t}\r\n\r\n/** Provide the component ProfileContainer with data and functions */\r\nexport default compose<React.ComponentType>( //compose applies consistently HOCs to component\r\n\tconnect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n\twithRouter,\r\n)(ProfileContainer);"],"names":["props","_props$profilePhoto$s","_props$profilePhoto","_jsxs","className","s","children","_jsx","src","profilePhoto","small","alt","fullName","message","HeartOutlined","likesCount","AddPostForm","register","handleSubmit","formState","errors","useForm","onSubmit","formData","addPost","newPostText","data","type","maxLength","value","MyPosts","postsElement","postsData","reverse","map","p","Post","id","myPosts","addMyPosts","posts","React","connect","state","_state$profilePage$pr","_state$profilePage$pr2","profilePage","profile","photos","actions","addPostActionCreator","ProfileDataForm","_ref","initialValues","saveProfile","Form","style","maxWidth","labelCol","span","wrapperCol","onFinish","_formData$lookingForA","updatedProfile","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","onFinishFailed","errorInfo","Item","label","name","rules","required","max","min","Input","valuePropName","Checkbox","pattern","RegExp","initialValue","vk","website","youtube","offset","Button","htmlType","editMode","setEditMode","useState","status","setStatus","useEffect","activateEditMode","isOwner","onDoubleClick","EditOutlined","onClick","onChange","e","currentTarget","autoFocus","onBlur","deactivateEditMode","updateStatus","ProfileData","_ref2","goToEditMode","Contact","contactTitle","contactValue","github","facebook","instagram","twitter","mainLink","_ref3","savePhoto","Preloader","large","userPhoto","ProfileStatusWithHooks","_e$target$files","target","files","length","then","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","userId","this","authorizedUserId","navigate","getUserProfile","getStatus","console","error","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","compose","auth","isAuth","WrappedComponent","location","useLocation","useNavigate","params","useParams","router"],"sourceRoot":""}