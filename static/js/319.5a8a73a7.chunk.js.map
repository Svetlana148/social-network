{"version":3,"file":"static/js/319.5a8a73a7.chunk.js","mappings":"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","sources":["webpack://react_4_lesson/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react_4_lesson/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","webpack://react_4_lesson/./src/components/FormsControls/FormsControls.module.css?97b1","components/Dialogs/Message/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__58Oo1\",\"dialogsItems\":\"Dialogs_dialogsItems__luJ9+\",\"active\":\"Dialogs_active__Vvmok\",\"messages\":\"Dialogs_messages__gty4Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__5lMen\",\"dialogsItems\":\"DialogItem_dialogsItems__ZGTbQ\",\"active\":\"DialogItem_active__PIgQM\",\"avatar\":\"DialogItem_avatar__vY7jl\",\"messages\":\"DialogItem_messages__6gO-S\"};","/** Shows the user with whom the dialogue is being conducted*/\r\nimport React from \"react\";\r\nimport s from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport userPhoto from \"../../../img/UserUnknown.png\";\r\n\r\n\r\nexport type PropsType = {\r\n\tid: number\r\n\tname: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\tlet path = '/Dialogs/' + props.id;\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className={s.dialog + ' ' + s.active}>\r\n\t\t\t\t<NavLink to={path}>\r\n\t\t\t\t\t<img className={s.avatar} src={userPhoto} alt=\"\" />\r\n\t\t\t\t\t{props.name} \r\n\t\t\t\t</NavLink>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default DialogItem;","/** Render messages*/\r\nimport React from \"react\";\r\n// import s from \"./Message.module.css\";\r\n\r\n\r\nexport type PropsType = {\r\n\tmessage: string\r\n}\r\n\r\n\r\nconst Message:React.FC<PropsType>=(props)=>{\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"message\">\r\n\t\t\t\t{props.message}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EHU6h\",\"error\":\"FormsControls_error__jIJAV\",\"formSummaryError\":\"FormsControls_formSummaryError__ew3kX\"};","/** Render the \"Message\" form (for \"Dialogs.tsx\") and if Submit is successful, add this Message */\r\nimport React from \"react\";\r\nimport { SubmitErrorHandler, SubmitHandler, useForm } from \"react-hook-form\";\r\nimport s from \"../../../FormsControls/FormsControls.module.css\";\r\nimport { AddMessageActionCreatorType } from \"../../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst maxLength50 =  50;\r\n\r\n/** What data does the form collect (what the user enters)*/\r\ninterface IAddMessageForm {\r\n\tnewMessageText: string\r\n}\r\n\r\n/** What do we pass to the function with the form (handler function)*/\r\ninterface IPropsAddMessageForm {\t\t\r\n\taddMessageActionCreator: AddMessageActionCreatorType\r\n}\r\n\r\n\r\nexport function AddMessageForm (props: IPropsAddMessageForm\t) {\r\n\r\n\tconst { register, handleSubmit, formState: {errors}  } = useForm<IAddMessageForm>({\r\n      defaultValues: {              \r\n      }\r\n   })\r\n\r\n\t/** Successful Submit */\r\n\tconst submit : SubmitHandler<IAddMessageForm > = (formData) =>{\r\n\t\tprops.addMessageActionCreator(formData.newMessageText);\r\n\t}\r\n\t\r\n\t/** unsuccessful Submit*/\r\n\tconst error : SubmitErrorHandler<IAddMessageForm > = data =>{\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* At the entrance Successful and unsuccessful Submit*/}\r\n\t\t\t<form onSubmit={handleSubmit(submit, error)}>   \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type='textarea' {...register('newMessageText', {required: \"Message is required\", \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmaxLength:  {value: maxLength50, message: `Message ${maxLength50} symbols`},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})} placeholder=\"Enter your message\"/>\r\n\t\t\t\t\t{ errors.newMessageText && \r\n\t\t\t\t\t\t\t<span className={s.formSummaryError}>{ errors.newMessageText?.message }</span>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button>Send</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form> \r\n\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default AddMessageForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/** Renders \"Dialogs\" and \"Messages\" and calls the form to add a Message*/\r\nimport React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { AddMessageActionCreatorType, InitialStateType } from \"../../redux/dialogs-reducer\";\r\nimport { AddMessageForm } from \"./Message/AddMessageForm/AddMessageForm\";\r\n\r\ntype PropsType = {\t\t\t\t\t\t\r\n\tdialogsPage: InitialStateType\r\n\taddMessageActionCreator: AddMessageActionCreatorType\r\n}\r\n\r\n\r\nconst Dialogs : React.FC<PropsType> = (props) => {\r\n\r\n\t/** Auxiliarily, we take in \"let state =\" (with which we will work further) only \"props.dialogsPage\"*/\r\n\tlet state = props.dialogsPage;\t\r\n\r\n\t/** Renders all dialogs and Messages */\r\n\tlet dialogsElements = state.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />);\r\n\tlet messagesElement = state.messagesData.map(m => <Message message={m.message} />);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>This page is in development</h2>\r\n\t\t\t<div className={s.dialogs}>\r\n\t\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t\t{dialogsElements}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={s.messages}>\r\n\t\t\t\t\t<div>{messagesElement}</div>\r\n\r\n\t\t\t\t\t<div><AddMessageForm addMessageActionCreator = {props.addMessageActionCreator}/></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialogs;","/** HOC REDIRECTS to Login, if not logged in  */\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType)=>({\r\n\tisAuth : state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n\tisAuth : boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\n\r\n/**  Wrap the transferred Component with Redirect (with props-\"WCP\"(Wrapper Component Props)) */\r\n/** Function that creates a wrapper component */\r\nexport function withAuthRedirect<WCP extends {}> (WrappedComponent: React.ComponentType<WCP>){\r\n\r\n\t/** Wrapping Component */\r\n\tconst RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\t\tlet {isAuth, ...restProps} = props   //Забираем из props-ов \"isAuth\"\r\n\r\n\t\t\tif (!isAuth) return <Navigate to={(\"/Login\")}/>\r\n\t\t\treturn <WrappedComponent {...restProps as WCP} />\r\n\t}\r\n\t/** provide pice of State */\r\n\tlet ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\treturn ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\n","/** Supply component \"Dialogs\" with data and \r\n * login check (redirect to logout, if we are not login)*/\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage,\r\n\t}\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect(mapStateToProps, {...actions}),\r\n\twithAuthRedirect\t\t\t// If you are not logged in, then we redirect you to Login. \"withAuthRedirect\"-HOC\r\n\r\n)(Dialogs);\r\n"],"names":["props","path","id","_jsx","children","className","s","dialog","active","_jsxs","NavLink","to","avatar","src","userPhoto","alt","name","message","AddMessageForm","_errors$newMessageTex","register","handleSubmit","formState","errors","useForm","defaultValues","_Fragment","onSubmit","formData","addMessageActionCreator","newMessageText","data","type","required","maxLength","value","concat","placeholder","state","dialogsPage","dialogsElements","dialogsData","map","d","DialogItem","messagesElement","messagesData","m","Message","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps","Navigate","Dialogs"],"sourceRoot":""}